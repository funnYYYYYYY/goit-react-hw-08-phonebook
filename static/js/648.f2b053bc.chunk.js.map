{"version":3,"file":"static/js/648.f2b053bc.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Form/Form.styled.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/ContactsList.jsx"],"sourcesContent":["export const getContact = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import styled from 'styled-components';\n\nconst Container = styled.form`\n  border: 1px solid black;\n  display: block;\n  padding: 20px;\n  width: 250px;\n  height: 250px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  height: 20px;\n  margin-bottom: 20px;\n`;\n\nconst Input = styled.input`\n  display: block;\n  height: 25px;\n  font-size: 18px;\n  margin-top: 5px;\n  margin-bottom: 20px;\n  &:focus {\n    outline: none;\n    border: 2px solid #468949;\n  }\n`;\n\nconst Button = styled.button`\n  height: 25px;\n  border-radius: 5px;\n  cursor: pointer;\n  border: none;\n  &:hover {\n    background-color: orange;\n    color: blue;\n  }\n`;\n\nconst Title = styled.div`\n  font-size: 30px;\n  color: black;\n  font-style: italic;\n  font-weight: bold;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\nexport { Container, Label, Input, Button, Title };\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState } from 'react';\nimport { Container, Label, Input, Button } from '../Form/Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContact } from 'redux/contacts/selectors';\n\nimport { nanoid } from 'nanoid';\nimport { addContacts } from 'redux/contacts/operation';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContact);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const correctName = name.toLowerCase();\n    const IsContactList = contacts.find(\n      contact => contact.name.toLowerCase() === correctName\n    );\n\n    IsContactList\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContacts({ name, number, id: nanoid() }));\n    if (!IsContactList) {\n      setName('');\n      setNumber('');\n    }\n  };\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.log('Invalid subscription type');\n    }\n  };\n\n  const modelId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <Container autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Label htmlFor={modelId}>Name</Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n        value={name}\n        id={modelId}\n      />\n      <Label htmlFor={numberId}>Number</Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n        value={number}\n        id={numberId}\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  height: 25px;\n  border-radius: 5px;\n  cursor: pointer;\n  border: none;\n  &:hover {\n    background-color: orange;\n    color: blue;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter, getContact } from 'redux/contacts/selectors';\n\nimport { deleteContacts } from 'redux/contacts/operation';\nimport { Button } from './Contacts.styled';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContact);\n\n  const filters = useSelector(getFilter);\n  const normFilter = filters.toLowerCase();\n\n  const filterContactList = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normFilter)\n  );\n\n  return (\n    <ul>\n      {filterContactList.map(({ id, name, number }) => (\n        <li key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteContacts(id));\n            }}\n          >\n            Delete\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Label, Input } from 'components/Form/Form.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/sliceFilter';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const getFilterValue = e => {\n    return dispatch(filterContact(e.target.value));\n  };\n\n  return (\n    <>\n      <Label>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={getFilterValue}\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operation';\nimport { Form } from '../components/Form/Form';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <>\n        <Helmet>\n          <title>Your contacts</title>\n        </Helmet>\n        <Form />\n        <Filter />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <Contacts />\n      </>\n    </HelmetProvider>\n  );\n}\n"],"names":["getContact","state","contacts","items","getFilter","filter","getIsLoading","isLoading","Container","styled","Label","Input","Button","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","console","log","modelId","numberId","autoComplete","onSubmit","preventDefault","correctName","toLowerCase","IsContactList","find","contact","alert","addContacts","htmlFor","type","pattern","title","required","onChange","Contacts","normFilter","filterContactList","includes","map","onClick","deleteContacts","Filter","filterContact","ContactsList","useEffect","fetchContacts"],"sourceRoot":""}